{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["hljs","require","newLine","md","typographer","highlight","str","lang","getLanguage","value","__","utils","escapeHtml","use","App","state","input","result","min","menu","handleChange","bind","handleReset","handleMinimize","handleMenu","e","r","render","target","this","setState","name","className","id","style","display","aria-label","onClick","onChange","autoFocus","margin","dangerouslySetInnerHTML","__html","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gRAMIA,G,YAAOC,EAAQ,KACfC,EAAUD,EAAQ,KAClBE,EAAKF,EAAQ,IAARA,CAAuB,CAC9BG,aAAa,EACbC,UAAW,SAAUC,EAAKC,GACxB,GAAIA,GAAQP,EAAKQ,YAAYD,GAC3B,IACE,MAAO,2BACAP,EAAKK,UAAUE,EAAMD,GAAK,GAAMG,MAChC,gBACP,MAAOC,IAGX,MAAO,2BAA6BP,EAAGQ,MAAMC,WAAWN,GAAO,mBAEhEO,IAAIX,GAqIQY,E,kDAlIb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,GACPC,OAAQ,GACRC,KAAK,EACLC,MAAM,GAER,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBACtB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAXN,E,yDAcDI,GAAI,IAAD,EACVC,EAAIvB,EAAGwB,OAAOF,EAAEG,OAAOnB,OAC3BoB,KAAKC,UAAL,mBACGL,EAAEG,OAAOG,KAAON,EAAEG,OAAOnB,OAD5B,uBAEUiB,GAFV,M,oCAOAG,KAAKC,SAAS,CACZd,MAAO,GACPC,OAAQ,O,uCAKNY,KAAKd,MAAMG,IACbW,KAAKC,SAAS,CACZZ,KAAK,IAGPW,KAAKC,SAAS,CACZZ,KAAK,M,mCAMLW,KAAKd,MAAMI,KACbU,KAAKC,SAAS,CACZX,MAAM,IAGRU,KAAKC,SAAS,CACZX,MAAM,M,+BAsBZ,OACE,kBAAC,aAAD,KACE,yBAAKa,UAAU,OACb,wBAAIC,GAAG,WAAP,cACA,wBAAIA,GAAG,SAAP,WAAuB,0BAAMA,GAAG,QAAT,OACvB,2IAIA,mCACE,yBAAKD,UAAU,eAAeE,MAAO,CAACC,QAASN,KAAKd,MAAMG,IAAM,OAAS,UACvE,yBAAKc,UAAU,aACb,uBAAGA,UAAU,kBAAb,sCACA,yBAAKA,UAAU,sBACb,4BAAQI,aAAW,WAAWC,QAASR,KAAKN,iBAC5C,4BAAQa,aAAW,QAAQC,QAASR,KAAKP,gBAG7C,kBAAC,iBAAD,KACE,yBAAKU,UAAU,aACb,8BAAUD,KAAK,QAAQE,GAAG,SAASxB,MAAOoB,KAAKd,MAAMC,MAAOsB,SAAUT,KAAKT,aAAcmB,WAAS,OAIxG,yBAAKP,UAAU,gBAAgBE,MAAO,CAACM,QAAQX,KAAKd,MAAMG,IAAM,UAC9D,yBAAKc,UAAU,aACb,uBAAGA,UAAU,kBAAb,0CAEF,kBAAC,iBAAD,KACE,yBAAKA,UAAU,SAASS,wBAAyB,CAACC,OAAQb,KAAKd,MAAME,aAI3E,gCACE,4BAAQgB,GAAG,OAAOI,QAASR,KAAKL,YAAhC,QACCK,KAAKd,MAAMG,IACV,4BAAQe,GAAG,WAAWI,QAASR,KAAKN,gBAApC,aAEA,IAGJ,yBAAKS,UAAU,cAAcE,MAAO,CAACC,QAASN,KAAKd,MAAMI,KAAO,QAAU,SACxE,qCACA,6BACA,wMAKA,4BACE,sCACA,wCACA,qD,GA3HMwB,aCXEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAStB,OACP,kBAAC,IAAMuB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5c7fe8d7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ScrollSync, ScrollSyncPane } from 'react-scroll-sync';\n\nimport './App.css';\nimport '98.css';\n\nvar hljs = require('highlight.js')\nvar newLine = require('markdown-it-preserve-newline');\nvar md = require('markdown-it')({\n  typographer: true,\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return '<pre class=\"hljs\"><code>' +\n               hljs.highlight(lang, str, true).value +\n               '</code></pre>';\n      } catch (__) {}\n    }\n\n    return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n  }\n}).use(newLine)\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      result: '',\n      min: false,\n      menu: false\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleMinimize = this.handleMinimize.bind(this);\n    this.handleMenu = this.handleMenu.bind(this);\n  }\n\n  handleChange(e) {\n    let r = md.render(e.target.value)\n    this.setState({\n      [e.target.name]: e.target.value,\n      result: r\n    })\n  }\n\n  handleReset() {\n    this.setState({\n      input: '',\n      result: ''\n    })\n  }\n\n  handleMinimize() {\n    if (this.state.min) {\n      this.setState({\n        min: false\n      })\n    } else {\n      this.setState({\n        min: true\n      })\n    }\n  }\n\n  handleMenu() {\n    if (this.state.menu) {\n      this.setState({\n        menu: false\n      })\n    } else {\n      this.setState({\n        menu: true\n      })\n    }\n  }\n\nrender() {\n  let menuEl =\n  `<div className='menu window'>\n    <h4>Start</h4>\n    <hr></hr>\n    <p>\n      Thanks for visiting! This markdown editor was coded by Aidan Bell; Full-Stack\n      Developer, Javascript Wizard, and Real Fun Guy. Take a peek into what I\\'ve been\n      working on:\n    </p>\n    <ul>\n      <li>Github</li>\n      <li>LinkedIn</li>\n      <li>Personal Site</li>\n    </ul>\n  </div>`\n\n  return (\n    <ScrollSync>\n      <div className=\"App\">\n        <h3 id=\"welcome\">Welcome to</h3>\n        <h1 id=\"title\">Markdown<span id=\"thin\">98</span></h1>\n        <p>\n          A quick and easy Markdown Editor. To clear the input box entirely, click the 'close' icon\n          on the window bar.\n        </p>\n        <container>\n          <div className=\"input window\" style={{display: this.state.min ? \"none\" : \"block\"}}>\n            <div className=\"title-bar\">\n              <p className=\"title-bar-text\">Write your boring, plain-text here</p>\n              <div className=\"title-bar-controls\">\n                <button aria-label=\"Minimize\" onClick={this.handleMinimize}></button>\n                <button aria-label=\"Close\" onClick={this.handleReset}></button>\n              </div>\n            </div>\n            <ScrollSyncPane>\n              <div className=\"inputText\">\n                <textarea name=\"input\" id=\"editor\" value={this.state.input} onChange={this.handleChange} autoFocus></textarea>\n              </div>\n            </ScrollSyncPane>\n          </div>\n          <div className=\"output window\" style={{margin: this.state.min ? \"auto\" : \"auto\"}}>\n            <div className=\"title-bar\">\n              <p className=\"title-bar-text\">Get your sweet, sweet, Markdown here:</p>\n            </div>\n            <ScrollSyncPane>\n              <div className=\"result\" dangerouslySetInnerHTML={{__html: this.state.result}}></div>\n            </ScrollSyncPane>\n          </div>\n        </container>\n        <footer>\n          <button id=\"more\" onClick={this.handleMenu}>More</button>\n          {this.state.min ?\n            <button id=\"inputMin\" onClick={this.handleMinimize}>Input Box</button>\n            :\n            ''\n          }\n        </footer>\n        <div className='menu window' style={{display: this.state.menu ? \"block\" : \"none\"}}>\n          <h4>Start</h4>\n          <hr></hr>\n          <p>\n            Thanks for visiting! This markdown editor was coded by Aidan Bell; Full-Stack\n            Developer, Javascript Wizard, and Real Fun guy. Have a peek into what I've been\n            working on:\n          </p>\n          <ul>\n            <li>Github</li>\n            <li>LinkedIn</li>\n            <li>Personal Site</li>\n          </ul>\n        </div>\n      </div>\n    </ScrollSync>\n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}